/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(integration.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(bf1f587422f551abbefdb083726c6ce4)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/pulsed_power/integration.h>
// pydoc.h is automatically generated in the build directory
#include <integration_pydoc.h>

void bind_integration(py::module& m)
{

    using integration = ::gr::pulsed_power::integration;


    py::class_<integration, gr::sync_decimator, std::shared_ptr<integration>>(
        m, "integration", D(integration))

        .def(py::init(&integration::make),  
             py::arg("decimation"),
             py::arg("sample_rate"),
             py::arg("duration"),
             py::arg("savefilename"),
             D(integration, make))


        .def("integrate",
             &integration::integrate,
             py::arg("out"),
             py::arg("sample"),
             py::arg("n_samples"),
             py::arg("calculate_with_last_value"),
             D(integration, integrate))


        .def("add_new_steps",
             &integration::add_new_steps,
             py::arg("out"),
             py::arg("sample"),
             py::arg("noutput_items"),
             D(integration, add_new_steps))

        ;

    py::enum_<::gr::pulsed_power::INTEGRATION_DURATION>(m, "INTEGRATION_DURATION")
        .value("DAY", ::gr::pulsed_power::INTEGRATION_DURATION::DAY)     // 0
        .value("WEEK", ::gr::pulsed_power::INTEGRATION_DURATION::WEEK)   // 1
        .value("MONTH", ::gr::pulsed_power::INTEGRATION_DURATION::MONTH) // 2
        .export_values();

    py::implicitly_convertible<int, ::gr::pulsed_power::INTEGRATION_DURATION>();
}
